<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
  const notSortableFieldsAfterSearch = !searchEngine ? '' : fields
      .filter(field => !field.hidden && !field.fieldTypeBoolean && !field.fieldTypeNumeric && !field.fieldTypeTemporal)
      .map(field => `'${field.fieldName}'`)
      .join(', ');
_%>
import { Component, OnInit } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { ActivatedRoute, Data, ParamMap, Router } from '@angular/router';
import { combineLatest, filter, Observable, switchMap, tap } from 'rxjs';
<%_ if (!readOnly) { _%>
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
<%_ } _%>

import { I<%= entityAngularName %> } from '../<%= entityFileName %>.model';
<%_ if (!paginationNo) { %>
import {
  ITEMS_PER_PAGE,
  PAGE_HEADER,
  TOTAL_COUNT_RESPONSE_HEADER,
} from 'app/config/pagination.constants';
<%_ } _%>
import {
  ASC,
  DESC,
  SORT,
  ITEM_DELETED_EVENT,
  DEFAULT_SORT_DATA
} from 'app/config/navigation.constants';
import { EntityArrayResponseType, <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (!readOnly) { _%>
import { <%= entityAngularName %>DeleteDialogComponent } from '../delete/<%= entityFileName %>-delete-dialog.component';
<%_ } _%>
<%_ if (fieldsContainBlob) { _%>
import { DataUtils } from 'app/core/util/data-util.service';
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
import { ParseLinks } from 'app/core/util/parse-links.service';
<%_ } _%>
<%_ if (jpaMetamodelFiltering) { _%>
import { FilterOptions, IFilterOptions } from 'app/shared/filter/filter.model';
<%_ } _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>',
    templateUrl: './<%= entityFileName %>.component.html'
})
export class <%= entityAngularName %>Component implements OnInit {

    <%= entityInstancePlural %>?: I<%= entityAngularName %>[];
    isLoading = false;

    predicate = '<%- primaryKey.name %>';
    ascending = true;
<%_ if (searchEngine) { _%>
    currentSearch: string;
<%_ } _%>
<%_ if (jpaMetamodelFiltering) { _%>
    filters: IFilterOptions = new FilterOptions();
<%_ } _%>

<%_ if (paginationPagination) { _%>
<%- include('pagination-template', { notSortableFieldsAfterSearch: notSortableFieldsAfterSearch }); -%>
<%_ } else if (paginationInfiniteScroll) { _%>
<%- include('infinite-scroll-template', { notSortableFieldsAfterSearch: notSortableFieldsAfterSearch }); -%>
<%_ } _%>

    constructor(
      protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
      protected activatedRoute: ActivatedRoute,
      public router: Router,
<%_ if (paginationInfiniteScroll) { _%>
      protected parseLinks: ParseLinks,
<%_ } _%>
<%_ if (fieldsContainBlob) { _%>
      protected dataUtils: DataUtils,
<%_ } _%>
<%_ if (!readOnly) { _%>
      protected modalService: NgbModal
<%_ } _%>
    ) {}

<%_ if (paginationInfiniteScroll) { _%>
    reset(): void {
      this.page = 1;
      this.<%= entityInstancePlural %> = [];
      this.load();
    }

    loadPage(page: number): void {
      this.page = page;
      this.load();
    }

<%_ } _%>
<%_ if (primaryKey) { _%>
    track<%= primaryKey.nameCapitalized %>(_index: number, item: I<%= entityAngularName %>): <%= primaryKey.tsType %> {
      return item.<%= primaryKey.name %>!;
    }
<%_ } _%>

<%_ if (searchEngine) { _%>
    search(query: string): void {
  <%_ if (notSortableFieldsAfterSearch) { _%>
      if (query && [<%- notSortableFieldsAfterSearch %>].includes(this.predicate)) {
        this.predicate = '<%- primaryKey.name %>';
        this.ascending = true;
      }
  <%_ } _%>
  <%_ if (!paginationNo) { _%>
      this.page = 1;
  <%_ } _%>
      this.currentSearch = query;
      this.navigateToWithComponentValues();
    }
<%_ } _%>

    ngOnInit(): void {
      this.load();
    }

<%_ if (fieldsContainBlob) { _%>
    byteSize(base64String: string): string {
      return this.dataUtils.byteSize(base64String);
    }

    openFile(base64String: string, contentType: string | null | undefined): void {
      return this.dataUtils.openFile(base64String, contentType);
    }
<%_ } _%>

<%_ if (!readOnly) { _%>
    delete(<%= entityInstance %>: I<%= entityAngularName %>): void {
      const modalRef = this.modalService.open(<%= entityAngularName %>DeleteDialogComponent, { size: 'lg', backdrop: 'static' });
      modalRef.componentInstance.<%= entityInstance %> = <%= entityInstance %>;
      // unsubscribe not needed because closed completes on modal close
      modalRef.closed
        .pipe(
          filter(reason => reason === ITEM_DELETED_EVENT),
          switchMap(() => this.queryBackendWithRouteInformations())
        ).subscribe(
          {
            next: (res: EntityArrayResponseType) => {
            this.onResponseSuccess(res);
          }
        });
    }
<%_ } _%>

    load(): void {
      this.queryBackendWithRouteInformations().subscribe({
        next: (res: EntityArrayResponseType) => {
          this.onResponseSuccess(res);
        }
      });
    }

    navigateToWithComponentValues(): void {
      this.handleNavigation(<% if (!paginationNo) { %>this.page, <% } %>this.predicate, this.ascending<% if (jpaMetamodelFiltering) { %>, this.filters<% } %><% if (searchEngine) { %>, this.currentSearch<% } %>);
    }

<%_ if (!paginationNo) { _%>
    navigateToPage(page = this.page): void {
      this.handleNavigation(page, this.predicate, this.ascending<% if (jpaMetamodelFiltering) { %>, this.filters<% } %><% if (searchEngine) { %>, this.currentSearch<% } %>);
    }
<%_ } _%>

    protected queryBackendWithRouteInformations(): Observable<EntityArrayResponseType> {
      return combineLatest([this.activatedRoute.queryParamMap, this.activatedRoute.data])
        .pipe(
          tap(([params, data]) => this.fillComponentAttributeFromRoute(params, data)),
          switchMap(() =>
            this.queryBackend(<% if (!paginationNo) { %>this.page, <% } %>this.predicate, this.ascending<% if (jpaMetamodelFiltering) { %>, this.filters<% } %><% if (searchEngine) { %>, this.currentSearch<% } %>)
          )
        );
    }

    protected fillComponentAttributeFromRoute(params: ParamMap, data: Data): void {
<%_ if (!paginationNo) { _%>
      const page = params.get(PAGE_HEADER);
      this.page = +(page ?? 1);
<%_ } _%>
      const sort = (params.get(SORT) ?? data[ DEFAULT_SORT_DATA ]).split(',');
      this.predicate = sort[ 0 ];
      this.ascending = sort[ 1 ] === ASC;
<%_ if (jpaMetamodelFiltering) { _%>
      this.filters.initializeFromParams(params);
<%_ } _%>
<%_ if (searchEngine) { _%>
      this.currentSearch = params['search'] ?? '';
<%_ } _%>
    }

    protected onResponseSuccess(response: EntityArrayResponseType): void {
      this.fillComponentAttributesFromResponseHeader(response.headers);
      this.fillComponentAttributesFromResponseBody(response.body);
    }

    protected fillComponentAttributesFromResponseHeader(headers: HttpHeaders): void {
<%_ if (!paginationNo) { _%>
  <%_ if (paginationPagination) { _%>
      this.totalItems = Number(headers.get(TOTAL_COUNT_RESPONSE_HEADER));
  <%_ } else if (paginationInfiniteScroll) { _%>
      const linkHeader = headers.get('link');
      if (linkHeader) {
        this.links = this.parseLinks.parse(linkHeader);
      } else {
        this.links = {
          last: 0,
        };
      }
    <%_ } _%>
<%_ } _%>
    }

    protected fillComponentAttributesFromResponseBody(data: I<%= entityAngularName %>[] | null): void {
<%_ if (paginationInfiniteScroll) { _%>
      if (data) {
        if (!this.<%= entityInstancePlural %>) {
          this.<%= entityInstancePlural %> = [];
        }
        for (const d of data) {
          this.<%= entityInstancePlural %>?.push(d);
        }
      }
<%_ } else { _%>
      this.<%= entityInstancePlural %> = data ?? [];
<%_ } _%>
    }

    protected queryBackend(<% if (!paginationNo) { %>page?: number, <% } %>predicate?: string, ascending?: boolean<% if (jpaMetamodelFiltering) { %>, filters?: IFilterOptions<% } %><% if (searchEngine) { %>, currentSearch?: string<% } %>): Observable<EntityArrayResponseType> {
      this.isLoading = true;
<%_ if (!paginationNo) { _%>
      const pageToLoad: number = page ?? 1;
<%_ } _%>
      const queryObject<% if (jpaMetamodelFiltering) { %>: any <% } %> = {
<%_ if (!paginationNo) { _%>
        page: pageToLoad - 1,
        size: this.itemsPerPage,
<%_ } _%>
<%_ if (searchEngine) { _%>
        query: currentSearch,
<%_ } _%>
        sort: this.getSortQueryParam(predicate, ascending),
      };
<%_ if (jpaMetamodelFiltering) { _%>
      if (filters?.hasAnyFilterSet()) {
        filters.filterOptions.forEach(filterOption => {
          queryObject[filterOption.name] = filterOption.value;
        });
      }
<%_ } _%>
      return this.<%= entityInstance %>Service.query(queryObject)
        .pipe(
          tap(() => this.isLoading = false)
        );
    }

    protected handleNavigation(<% if (!paginationNo) { %>page = this.page, <% } %>predicate?: string, ascending?: boolean<%_ if (jpaMetamodelFiltering) { _%>, filters?: IFilterOptions<%_ } _%><%_ if (searchEngine) { _%>, currentSearch?: string<%_ } _%>): void {
      const queryParamsObj<%_ if (jpaMetamodelFiltering) { _%>: any<%_ } _%> = {
<%_ if (searchEngine) { _%>
        search: currentSearch,
<%_ } _%>
<%_ if (!paginationNo) { _%>
        page,
        size: this.itemsPerPage,
<%_ } _%>
        sort: this.getSortQueryParam(predicate, ascending),
      };
<%_ if (jpaMetamodelFiltering) { _%>
      if (filters?.hasAnyFilterSet()) {
        filters.filterOptions.forEach(filterOption => {
          queryParamsObj[filterOption.nameAsQueryParam()] = filterOption.value;
        });
      }
<%_ } _%>

      this.router.navigate([ './' ], {
        relativeTo: this.activatedRoute,
        queryParams: queryParamsObj,
      });
    }

    protected getSortQueryParam(predicate = this.predicate, ascending = this.ascending): string[] {
      const ascendingQueryParam = ascending ? ASC : DESC;
      return [predicate + ',' + ascendingQueryParam];
    }
}
