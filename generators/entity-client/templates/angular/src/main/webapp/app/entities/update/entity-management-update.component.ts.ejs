<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const allRelationshipsByEntityNeedingOptions = Object
  .values(differentRelationships)
  .map(relationships => relationships.filter(rel => rel.ownerSide))
  .filter(relationships => relationships.length > 0);

const hasValidationRule = fields.some(field =>
  field.fieldValidate && (
    field.fieldValidationRequired ||
    field.fieldValidationMinLength ||
    field.fieldValidationMaxLength ||
    field.fieldValidationMin ||
    field.fieldValidationMax ||
    field.fieldValidationPattern
  )
);
const hasRequiredRelationship = relationships.some(relationship => relationship.relationshipRequired);
const isValidatorsRequired = hasValidationRule || hasRequiredRelationship;
_%>
import { Component, OnInit<% if (fieldsContainImageBlob) { %>, ElementRef<% } %> } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { FormBuilder, FormControl, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { finalize<% if (relationships.some(rel => rel.ownerSide === true)) { %>, map<% } %> } from 'rxjs/operators';

<%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
import dayjs from 'dayjs/esm';
import { DATE_TIME_FORMAT } from 'app/config/input.constants';
<%_ } _%>

import { I<%= entityAngularName %>, New<%= entityAngularName %> } from '../<%= entityFileName %>.model';
import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';
<%_ if (fieldsContainBlob) { _%>
import { AlertError } from 'app/shared/alert/alert-error.model';
import { EventManager, EventWithContent } from 'app/core/util/event-manager.service';
import { DataUtils, FileLoadError } from 'app/core/util/data-util.service';
<%_ } _%>
<%_
Object.keys(differentRelationships).forEach(key => {
  if (differentRelationships[key].some(rel => rel.reference.owned)) {
    const uniqueRel = differentRelationships[key][0];
    if (uniqueRel.otherEntityAngularName !== entityAngularName) {
      if (isBuiltInUser(uniqueRel.otherEntityAngularName)) {
_%>
import { IUser } from 'app/entities/user/user.model';
import { UserService } from 'app/entities/user/user.service';
<%_
      } else {
_%>
import { I<%= uniqueRel.otherEntityAngularName %> } from 'app/entities/<%= uniqueRel.otherEntityPath %>/<%= uniqueRel.otherEntityFileName %>.model';
import { <%= uniqueRel.otherEntityAngularName %>Service } from 'app/entities/<%= uniqueRel.otherEntityPath %>/service/<%= uniqueRel.otherEntityFileName %>.service';
<%_
      }
    }
  }
});
_%>
<%_ const enumImports = generateEntityClientEnumImports(fields); _%>
<%_ enumImports.forEach( (importedPath, importedType) => { _%>
import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>

@Component({
    selector: '<%= jhiPrefixDashed %>-<%= entityFileName %>-update',
    templateUrl: './<%= entityFileName %>-update.component.html'
})
export class <%= entityAngularName %>UpdateComponent implements OnInit {
    isSaving = false;
    <%= entityInstance %>: I<%= entityAngularName %> | null = null;
<%_ enumImports.forEach( (importedPath, importedType) => { _%>
    <%- _.lowerFirst(importedType) %>Values = Object.keys(<%- importedType %>);
<%_ }); _%>

<%_ for (const relationshipsByEntityNeedingOptions of Object.values(differentRelationships).map(relationships => relationships.filter(rel => rel.ownerSide)).filter(relationships => relationships.length > 0)) { _%>
  <%_ const relationshipsWithCustomUniqueOptions = relationshipsByEntityNeedingOptions.filter(rel => rel.relationshipOneToOne && rel.otherRelationship); _%>
  <%_ if (relationshipsByEntityNeedingOptions.length > relationshipsWithCustomUniqueOptions.length) { _%>
    <%_ const otherEntity = relationshipsByEntityNeedingOptions[0].otherEntity _%>
    <%= otherEntity.entityInstancePlural %>SharedCollection: I<%= otherEntity.entityAngularName %>[] = [];
  <%_ } _%>
  <%_ for (const relationship of relationshipsWithCustomUniqueOptions) { _%>
    <%= relationship.relationshipFieldNamePlural %>Collection: I<%= relationship.otherEntity.entityAngularName %>[] = [];
  <%_ } _%>
<%_ } _%>

    editForm = this.fb.group({
<%_ for (const field of fields.filter(field => !field.autoGenerate)) {
      const { fieldName } = field;
_%>
  <%_ if (field.fieldTypeBoolean) { _%>
        <%= fieldName %>: <% if (field.fieldValidationRequired) { %>[false, [Validators.required]]<% } else { %>false<% } %>,
  <%_ } else { _%>
        <%= fieldName %>: [<% if (field.fieldValidate === true) { %>null, [<% if (field.fieldValidationRequired) { %>Validators.required,<% } %><% if (field.fieldValidationMinLength) { %>Validators.minLength(<%= field.fieldValidateRulesMinlength %>),<% } %><% if (field.fieldValidationMaxLength) { %>Validators.maxLength(<%= field.fieldValidateRulesMaxlength %>),<% } %><% if (field.fieldValidationMin) { %>Validators.min(<%= field.fieldValidateRulesMin %>),<% } %><% if (field.fieldValidationMax) { %>Validators.max(<%= field.fieldValidateRulesMax %>),<% } %><% if (field.fieldValidationPattern) { %>Validators.pattern('<%= field.fieldValidateRulesPattern.replace(/\\/g, '\\\\') %>'),<% } %>]<% } %>],
  <%_ } _%>
  <%_ if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
        <%= fieldName %>ContentType: [],
  <%_ } _%>
<%_ } _%>
<%_ for (const relationship of relationships) {
  const ownerSide = relationship.ownerSide;
  const relationshipName = relationship.relationshipName;
  const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
  const relationshipRequired = relationship.relationshipRequired;
_%>
  <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>
        <%= relationshipName %>: [<% if (relationshipRequired) { %>null,Validators.required<% } %>],
  <%_ } else if (relationship.relationshipManyToMany && ownerSide) { _%>
        <%= relationshipFieldNamePlural %>: [[]<% if (relationshipRequired) { %>, Validators.required<% } %>],
  <%_ } _%>
<%_ } _%>
    });

    constructor(
<%_ if (fieldsContainBlob) { _%>
        protected dataUtils: DataUtils,
        protected eventManager: EventManager,
<%_ } _%>
        protected <%= entityInstance %>Service: <%= entityAngularName %>Service,
<%_
Object.keys(differentRelationships).forEach(key => {
  if (differentRelationships[key].some(rel => rel.relationshipManyToOne || rel.relationshipOneToOne && rel.ownerSide || rel.relationshipManyToMany && rel.ownerSide)) {
    const uniqueRel = differentRelationships[key][0];
    if (uniqueRel.otherEntityAngularName !== entityAngularName) {
_%>
        protected <%= uniqueRel.otherEntityName %>Service: <%= uniqueRel.otherEntityAngularName %>Service,
<%_
    }
  }
});
_%>
<%_ if (fieldsContainImageBlob) { _%>
        protected elementRef: ElementRef,
<%_ } _%>
        protected activatedRoute: ActivatedRoute,
        protected fb: FormBuilder,
    ) {}
<%_ for (const relationshipsByEntity of Object.values(differentRelationships).filter(arr => arr.some(rel => rel.ownerSide && rel.otherEntity.primaryKey))) {
      const { otherEntity } = relationshipsByEntity[0];
_%>

    compare<%= otherEntity.entityAngularName %> = (o1: I<%= otherEntity.entityAngularName %> | null, o2: I<%= otherEntity.entityAngularName %> | null): boolean =>
        this.<%= otherEntity.entityInstance %>Service.compare<%= otherEntity.entityAngularName %>(o1, o2);
<%_ } _%>

    ngOnInit(): void {
        this.activatedRoute.data.subscribe(({ <%= entityInstance %> }) => {
            this.<%= entityInstance %> = <%= entityInstance %>;

<%_ if (fieldsContainInstant || fieldsContainZonedDateTime) { _%>
            if (<%= entityInstance %> == null) {
                const today = dayjs().startOf('day');
                <%= entityInstance %> = {
  <%_ for (const field of fields.filter(field => field.fieldTypeTimed)) {
        const { fieldName } = field;
  _%>
                    <%= fieldName %>: today,
  <%_ } _%>
                };
                this.editForm.patchValue(<%= entityInstance %>);
            } else {
<%_ } else { _%>
            if (<%= entityInstance %> != null) {
<%_ } _%>
<%_ for (const field of fields.filter(field => field.autoGenerate)) { _%>
                this.editForm.addControl('<%= field.fieldName %>', new FormControl(null, { validators: [Validators.required]}));
<%_ } _%>
                this.updateForm(<%= entityInstance %>);
            }

<%_ if (relationships.filter(rel => rel.ownerSide && !rel.otherEntityIsEmbedded).length > 0) { _%>
            this.loadRelationshipsOptions();
<%_ } _%>
        });
    }

<%_ if (fieldsContainBlob) { _%>
    byteSize(base64String: string): string {
        return this.dataUtils.byteSize(base64String);
    }

    openFile(base64String: string, contentType: string | null | undefined): void {
        this.dataUtils.openFile(base64String, contentType);
    }

    setFileData(event: Event, field: string, isImage: boolean): void {
        this.dataUtils.loadFileToForm(event, this.editForm, field, isImage).subscribe({
            error: (err: FileLoadError) =>
                this.eventManager.broadcast(
                    new EventWithContent<AlertError>('<%= frontendAppName %>.error', { <% if (enableTranslation) { %>...err, key: 'error.file.' + err.key<% } else { %>message: err.message<% } %> })
                )
        });
    }

  <%_ if (fieldsContainImageBlob) { _%>
    clearInputImage(field: string, fieldContentType: string, idInput: string): void {
        this.editForm.patchValue({
            [field]: null,
            [fieldContentType]: null
        });
        if (idInput && this.elementRef.nativeElement.querySelector('#' + idInput)) {
            this.elementRef.nativeElement.querySelector('#' + idInput).value = null;
        }
    }
  <%_ } _%>
<%_ } _%>

    previousState(): void {
        window.history.back();
    }

    save(): void {
        this.isSaving = true;
        const <%= entityInstance %> = this.createFromForm();
        if ('<%= primaryKey.name %>' in <%= entityInstance %>) {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.update(<%= entityInstance %>));
        } else {
            this.subscribeToSaveResponse(
                this.<%= entityInstance %>Service.create(<%= entityInstance %>));
        }
    }

    protected subscribeToSaveResponse(result: Observable<HttpResponse<I<%= entityAngularName %>>>): void {
        result.pipe(finalize(() => this.onSaveFinalize())).subscribe({
            next: () => this.onSaveSuccess(),
            error: () => this.onSaveError()
        });
    }

    protected onSaveSuccess(): void {
        this.previousState();
    }

    protected onSaveError(): void {
        // Api for inheritance.
    }

    protected onSaveFinalize(): void {
        this.isSaving = false;
    }

    protected updateForm(<%= entityInstance %>: I<%= entityAngularName %>): void {
        this.editForm.patchValue({
<%_ for (const field of fields) {
  const fieldName = field.fieldName;
_%>
  <%_ if (field.fieldTypeTimed) { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %> ? <%= entityInstance %>.<%= fieldName %>.format(DATE_TIME_FORMAT) : null,
  <%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
            <%= fieldName %>ContentType: <%= entityInstance %>.<%= fieldName %>ContentType,
  <%_ } else { _%>
            <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
  <%_ } _%>
<%_ } _%>
<%_ for (const relationship of relationships) {
  const ownerSide = relationship.ownerSide;
  const relationshipName = relationship.relationshipName;
  const relationshipFieldName = relationship.relationshipFieldName;
  const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
_%>
  <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>
            <%= relationshipName %>: <%= entityInstance %>.<%= relationshipFieldName %>,
  <%_ } else if (relationship.relationshipManyToMany && ownerSide) { _%>
            <%= relationshipFieldNamePlural %>: <%= entityInstance %>.<%= relationshipFieldNamePlural %>,
  <%_ } _%>
<%_ } _%>
        });
<%_ if (relationships.filter(rel => rel.ownerSide).length > 0) { _%>

  <%_ for (const relationshipsByEntityNeedingOptions of allRelationshipsByEntityNeedingOptions) { _%>
    <%_ const relationshipsWithCustomUniqueOptions = relationshipsByEntityNeedingOptions.filter(rel => rel.relationshipOneToOne && rel.otherRelationship); _%>
    <%_ const relationshipsWithCustomSharedOptions = relationshipsByEntityNeedingOptions.filter(rel => !relationshipsWithCustomUniqueOptions.includes(rel)); _%>
    <%_ if (relationshipsWithCustomSharedOptions.length > 0) { _%>
      <%_ const otherEntity = relationshipsByEntityNeedingOptions[0].otherEntity _%>
        this.<%= otherEntity.entityInstancePlural %>SharedCollection = this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing(
            this.<%= otherEntity.entityInstancePlural %>SharedCollection,
      <%_ for (const relationship of relationshipsWithCustomSharedOptions) { _%>
        <%_ const reference = relationship.reference _%>
            <%= relationship.collection ? '...(' : '' %><%= entityInstance %>.<%= reference.name %><%= relationship.collection ? ' ?? [])' : '' %>,
      <%_ } _%>
        );
    <%_ } _%>
    <%_ for (const relationship of relationshipsWithCustomUniqueOptions) { _%>
      <%_ const otherEntity = relationship.otherEntity _%>
      <%_ const reference = relationship.reference _%>
        this.<%= relationship.relationshipFieldNamePlural %>Collection = this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing(this.<%= relationship.relationshipFieldNamePlural %>Collection, <%= relationship.collection ? '...(' : '' %><%= entityInstance %>.<%= reference.name %><%= relationship.collection ? ' ?? [])' : '' %>);
    <%_ } _%>
  <%_ } _%>
<%_ } _%>
    }

<%_ if (relationships.filter(rel => rel.ownerSide && !rel.otherEntityIsEmbedded).length > 0) { _%>
    protected loadRelationshipsOptions(): void {
  <%_ for (const relationshipsByEntityNeedingOptions of Object.values(differentRelationships).map(relationships => relationships.filter(rel => rel.ownerSide)).filter(relationships => relationships.length > 0)) { _%>
    <%_ const relationshipsWithCustomUniqueOptions = relationshipsByEntityNeedingOptions.filter(rel => rel.relationshipOneToOne && rel.otherRelationship); %>
    <%_ const relationshipsWithCustomSharedOptions = relationshipsByEntityNeedingOptions.filter(rel => !relationshipsWithCustomUniqueOptions.includes(rel)); %>
    <%_ const otherEntity = relationshipsByEntityNeedingOptions[0].otherEntity _%>
    <%_ if (relationshipsWithCustomSharedOptions.length > 0) { _%>
        this.<%= otherEntity.entityInstance %>Service
            .query()
            .pipe(map((res: HttpResponse<I<%= otherEntity.entityAngularName %>[]>) => res.body ?? []))
            .pipe(map((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing(
                <%= otherEntity.entityInstancePlural %>,
      <%_ for (const relationship of relationshipsWithCustomSharedOptions) { _%>
        <%_ if (relationship.collection) { _%>
                ...(this.<%= entityInstance %>?.<%= relationship.propertyName %> ?? []),
        <%_ } else { _%>
                this.<%= entityInstance %>?.<%= relationship.propertyName %>,
        <%_ } _%>
      <%_ } _%>
            )))
            .subscribe((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => (this.<%= otherEntity.entityInstancePlural %>SharedCollection = <%= otherEntity.entityInstancePlural %>));
    <%_ } _%>
    <%_ for (const relationship of relationshipsWithCustomUniqueOptions) { %>
      <%_ const filter = relationship.jpaMetamodelFiltering ? `'${relationship.otherEntityRelationshipName}Id.specified': 'false'` : `filter: '${relationship.otherEntityRelationshipName.toLowerCase()}-is-null'`; _%>

        this.<%= relationship.otherEntityName %>Service
            .query({<%- filter %>})
            .pipe(map((res: HttpResponse<I<%= relationship.otherEntityAngularName %>[]>) => res.body ?? []))
            .pipe(map((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => this.<%= otherEntity.entityInstance %>Service.add<%= otherEntity.entityAngularName %>ToCollectionIfMissing(<%= otherEntity.entityInstancePlural %>, this.<%= entityInstance %>?.<%= relationship.propertyName %>)))
            .subscribe((<%= otherEntity.entityInstancePlural %>: I<%= otherEntity.entityAngularName %>[]) => (this.<%= relationship.relationshipFieldNamePlural %>Collection = <%= otherEntity.entityInstancePlural %>));
      <%_ } _%>
    <%_ } _%>
    }
<%_ } _%>

    protected createFromForm(): I<%= entityAngularName %> | New<%= entityAngularName %> {
        const rawValue = {
            ...this.editForm.getRawValue(),
<%_ for (const field of fields) {
  const fieldName = field.fieldName;
_%>
  <%_ if (field.fieldTypeTimed) { _%>
            <%= fieldName %>: this.editForm.get(['<%= fieldName %>'])!.value ? dayjs(this.editForm.get(['<%= fieldName %>'])!.value, DATE_TIME_FORMAT) : undefined,
  <%_ } _%>
<%_ } _%>
        };
        if (rawValue.<%= primaryKey.name %> != null) {
            return rawValue as I<%= entityAngularName %>;
        }
        return rawValue as New<%= entityAngularName %>;
    }
}
