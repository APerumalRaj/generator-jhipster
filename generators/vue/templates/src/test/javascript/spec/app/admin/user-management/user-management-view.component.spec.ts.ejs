<%_
const tsKeyId = this.generateTestEntityId(user.primaryKey.type);
_%>
import { shallowMount, createLocalVue } from '@vue/test-utils';
import axios from 'axios';
import sinon from 'sinon';
import VueRouter, { Route } from 'vue-router';

import AlertService from '@/shared/alert/alert.service';
import UserManagementView from '@/admin/user-management/user-management-view.vue';
import type UserManagementViewComponent from '@/admin/user-management/user-management-view.component';
import { Authority } from '@/shared/security/authority';

type UserManagementViewComponentType = Vue & InstanceType<typeof UserManagementViewComponent>;

const localVue = createLocalVue();
localVue.use(VueRouter);

let route: Partial<Route>;
let router: VueRouter;

jest.mock('vue-router/composables', () => ({
  useRoute: () => route,
  useRouter: () => router,
}));

const axiosStub = {
  get: sinon.stub(axios, 'get'),
};

describe('UserManagementView Component', () => {
  let alertService: AlertService;

  beforeEach(() => {
    route = {};
    alertService = new AlertService({
<%_ if (enableTranslation) { _%>
      i18n: { t: jest.fn() } as any,
<%_ } _%>
      bvToast: {
        toast: jest.fn(),
      } as any,
    });
  });

  describe('OnInit', () => {
    it('Should call load all on init', async () => {
      // GIVEN
      const userData = {
        id: 1,
        login: 'user',
        firstName: 'first',
        lastName: 'last',
        email: 'first@last.com',
        activated: true,
        langKey: 'en',
        authorities: [Authority.USER],
        createdBy: 'admin',
        createdDate: null,
        lastModifiedBy: null,
        lastModifiedDate: null,
        password: null,
      };
      axiosStub.get.resolves({ data: userData });

      route = {
        params: {
          userId: '' + <%- tsKeyId %>,
        },
      };

      const wrapper = shallowMount<UserManagementViewComponentType>(UserManagementView, {
        stubs: {
          'b-badge': true,
          'router-link': true,
          'font-awesome-icon': true,
        },
        localVue,
        provide: {
          alertService,
        },
      });
      const userManagementView = wrapper.vm;
  
      // WHEN
      await userManagementView.$nextTick();

      // THEN
      expect(axiosStub.get.calledWith('api/admin/users/' + <%- tsKeyId %>)).toBeTruthy();
      expect(userManagementView.user).toEqual(userData);
    });
  });
});
