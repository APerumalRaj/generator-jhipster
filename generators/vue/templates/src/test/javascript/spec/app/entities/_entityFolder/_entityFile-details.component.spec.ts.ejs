<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = this.generateTestEntityId(primaryKey.type);
_%>
/* tslint:disable max-line-length */
import { shallowMount, createLocalVue, MountOptions } from '@vue/test-utils';
import sinon, { SinonStubbedInstance } from 'sinon';
import { Route } from 'vue-router';

import <%= entityAngularName %>Detail from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-details.vue';
import type <%= entityAngularName %>DetailsComponent from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-details.component';
import <%= entityAngularName %>Service from '@/entities/<%= entityFolderName %>/<%= entityFileName %>.service';
import AlertService from '@/shared/alert/alert.service';

type <%= entityAngularName %>DetailsComponentType = Vue & InstanceType<typeof <%= entityAngularName %>DetailsComponent>;

const localVue = createLocalVue();

let route: Partial<Route>;
const routerGoMock = jest.fn();

jest.mock('vue-router/composables', () => ({
  useRoute: () => route,
  useRouter: () => ({ go: routerGoMock }),
}));

const <%= entityInstance %>Sample = { id: <%- tsKeyId %> };

describe('Component Tests', () => {
  let alertService: AlertService;

  afterEach(() => {
    jest.resetAllMocks();
  });

  describe('<%= entityAngularName %> Management Detail Component', () => {
    let <%= entityInstance %>ServiceStub: SinonStubbedInstance<<%= entityAngularName %>Service>;
    let mountOptions: MountOptions<<%= entityAngularName %>DetailsComponentType>;

    beforeEach(() => {
      route = {};
      <%= entityInstance %>ServiceStub = sinon.createStubInstance<<%= entityAngularName %>Service>(<%= entityAngularName %>Service);

      alertService = new AlertService({
<%_ if (enableTranslation) { _%>
        i18n: { t: jest.fn() } as any,
<%_ } _%>
        bvToast: {
          toast: jest.fn(),
        } as any,
      });

      mountOptions = {
        localVue,
        stubs: {
          'font-awesome-icon': true,
          'router-link': true,
        },
        provide: {
          alertService,
          <%= entityInstance %>Service: () => <%= entityInstance %>ServiceStub,
        },
      };
    });

    describe('Navigate to details', () => {
      it('Should call load all on init', async () => {
        // GIVEN
        <%= entityInstance %>ServiceStub.find.resolves(<%= entityInstance %>Sample);
        route = {
          params: {
            <%= entityInstance %>Id: '' + <%- tsKeyId %>,
          },
        };
        const wrapper = shallowMount<<%= entityAngularName %>DetailsComponentType>(<%= entityAngularName %>Detail, mountOptions);
        const comp = wrapper.vm;
  
        // WHEN
        await comp.$nextTick();

        // THEN
        expect(comp.<%= entityInstance %>).toBe(<%= entityInstance %>Sample);
      });
    });

    describe('Previous state', () => {
      it('Should go previous state', async () => {
        <%= entityInstance %>ServiceStub.find.resolves(<%= entityInstance %>Sample);
        const wrapper = shallowMount<<%= entityAngularName %>DetailsComponentType>(<%= entityAngularName %>Detail, mountOptions);
        const comp = wrapper.vm;
        await comp.$nextTick();

        comp.previousState();
        await comp.$nextTick();

        expect(routerGoMock).toHaveBeenCalledWith(-1);
      });
    });
  });
});
