// The Vue build version to load with the `import` command
// (runtime-only or standalone) has been set in webpack.common with an alias.
import Vue, { provide } from 'vue';
import { setupAxiosInterceptors } from '@/shared/config/axios-interceptor';

import { useStore } from '@/store';

import App from './app.vue';
import router<% if (applicationTypeGateway && microfrontend) { %>, { lazyRoutes }<% } %> from './router';
import { initFortAwesome<% if (enableTranslation) { %>, initI18N<% } %> } from './shared/config/config';
import { initBootstrapVue } from './shared/config/config-bootstrap-vue';
import JhiItemCountComponent from './shared/jhi-item-count.vue';
import JhiSortIndicatorComponent from './shared/sort/jhi-sort-indicator.vue';
import LoginService from './account/login.service';
import AccountService from './account/account.service';

import '../content/scss/global.scss';
import '../content/scss/vendor.scss';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } _%>
<%_ if (communicationSpringWebsocket) { _%>
import { useTrackerService } from './admin/tracker/tracker.service';
<%_ } _%>
/* tslint:disable */

// jhipster-needle-add-entity-service-to-main-import - JHipster will import entities services here

/* tslint:enable */
Vue.config.productionTip = false;
initFortAwesome(Vue);
initBootstrapVue(Vue);

Vue.component('jhi-item-count', JhiItemCountComponent);
Vue.component('jhi-sort-indicator', JhiSortIndicatorComponent);
<%_ if (enableTranslation) { _%>
const i18n = initI18N(Vue);
<%_ } _%>
const store = useStore();

/* tslint:disable */
<% if (!authenticationTypeOauth2) { %>const vue = <% } %>new Vue({
  el: '#app',
  components: { App },
  template: '<App/>',
  router,
<%_ if (!authenticationTypeOauth2) { _%>
  setup(_props, { emit }) {
    const loginService = new LoginService({ emit });
    provide('loginService', loginService);
<%_ } else { _%>
  setup() {
    provide('loginService', new LoginService());
<%_ } _%>
<%_ if (enableTranslation) { _%>
    const translationService = new TranslationService(store, i18n);
<%_ } _%>
    const accountService = new AccountService(store<%_ if (enableTranslation) { _%>, translationService<%_ } _%>);

    router.beforeResolve(async (to, from, next) => {
<%_ if (!authenticationTypeOauth2) { _%>
      // Make sure login modal is closed
      loginService.hideLogin();

<%_ } _%>
      if (!store.getters.authenticated) {
        await accountService.update();
      }
      if (to.meta?.authorities && to.meta.authorities.length > 0) {
        const value = await accountService.hasAnyAuthorityAndCheckAuth(to.meta.authorities);
        if (!value) {
          if (router.currentRoute.path !== '/forbidden') {
            next({ path: '/forbidden' });
            return;
          }
        }
      }
      next();
    });

    setupAxiosInterceptors(
      error => {
        const url = error.response?.config?.url;
        const status = error.status || error.response.status;
        if (status === 401) {
          // Store logged out state.
          store.commit('logout');
          if (!url.endsWith('api/account') && !url.endsWith('api/<% if (authenticationTypeSession) { %>authentication<% } else { %>authenticate<% } %>')) {
            // Ask for a new authentication
<%_ if (authenticationTypeOauth2) { _%>
            window.location.reload();
<%_ } else { _%>
            loginService.openLogin();
<%_ } _%>
            return;
          }
        }
        return Promise.reject(error);
      },
      error => {
        return Promise.reject(error);
      }
    );

<%_ if (enableTranslation) { _%>
    provide('translationService', translationService);
<%_ } _%>
    provide('accountService', accountService);
    // jhipster-needle-add-entity-service-to-main - JHipster will import entities services here
<%_ if (communicationSpringWebsocket) { _%>

    provide('trackerService', useTrackerService());
<%_ } _%>
<%_ if (applicationTypeMicroservice && microfrontend) { _%>
    provide('microfrontendI18n', false);
<%_ } _%>
  },
  store,
});
