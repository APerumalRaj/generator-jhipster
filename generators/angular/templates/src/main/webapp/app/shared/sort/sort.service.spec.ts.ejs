<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { SortService } from './sort.service';

describe('sort state', () => {
  const service = new SortService();

  describe('parseSortParam', () => {
    it('should accept undefined value', () => {
      const sortState = service.parseSortParam(undefined);
      expect(sortState).toEqual({});
    });
    it('should accept empty string', () => {
      const sortState = service.parseSortParam('');
      expect(sortState).toEqual({});
    });
    it('should accept predicate only string', () => {
      const sortState = service.parseSortParam('predicate');
      expect(sortState).toEqual({ predicate: 'predicate' });
    });
    it('should accept predicate and ASC string', () => {
      const sortState = service.parseSortParam('predicate,asc');
      expect(sortState).toEqual({ predicate: 'predicate', ascending: true });
    });
    it('should accept predicate and DESC string', () => {
      const sortState = service.parseSortParam('predicate,desc');
      expect(sortState).toEqual({ predicate: 'predicate', ascending: false });
    });
  });
  describe('buildSortParam', () => {
    it('should accept empty object', () => {
      const sortParam = service.buildSortParam({});
      expect(sortParam).toEqual([]);
    });
    it('should accept object with predicate', () => {
      const sortParam = service.buildSortParam({ predicate: 'column' });
      expect(sortParam).toEqual([]);
    });
    it('should accept object with predicate and true ascending value', () => {
      const sortParam = service.buildSortParam({ predicate: 'column', ascending: true });
      expect(sortParam).toEqual(['column,asc']);
    });
    it('should accept object with predicate and false ascending value', () => {
      const sortParam = service.buildSortParam({ predicate: 'column', ascending: false });
      expect(sortParam).toEqual(['column,desc']);
    });
  });
});
