<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.cucumber.stepdefs;

import io.cucumber.java.Before;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;

import <%= packageName %>.web.rest.UserResource;
import <%= packageName %>.security.AuthoritiesConstants;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
<%_ if (reactive) { _%>
import org.springframework.test.web.reactive.server.WebTestClient;
<%_ } else { _%>
import org.springframework.test.web.servlet.MockMvc;
<%_ } _%>

public class UserStepDefs extends StepDefs {

    @Autowired
<%_ if (!reactive) { _%>
    private MockMvc userResource;
<%_ } else { _%>
    private WebTestClient userResource;
<%_ } _%>

    @When("I search user {string}")
    public void i_search_user(String userId) throws Throwable {
<%_ if (!reactive) { _%>
        actions = userResource.perform(get("/api/admin/users/" + userId)
<%_ } else { _%>
        actions = accountWebTestClient.get().uri("/api/admin/users/" + userId)
<%_ } _%>
                    .with(user("admin").password("admin")
                        .roles(AuthoritiesConstants.USER, AuthoritiesConstants.ADMIN)
<%_ if (!reactive) { _%>
)
<%_ } _%>
                    .accept(MediaType.APPLICATION_JSON));

    }

    @Then("the user is found")
    public void the_user_is_found() throws Throwable {
        actions
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE));
    }

    @Then("his last name is {string}")
    public void his_last_name_is(String lastName) throws Throwable {
        actions.andExpect(jsonPath("$.lastName").value(lastName));
    }

}
