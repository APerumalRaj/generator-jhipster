<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest.errors;

import static org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation;

import tech.jhipster.config.JHipsterConstants;
import tech.jhipster.web.util.HeaderUtil;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Value;
<%_ if (!databaseTypeNo && !databaseTypeCassandra) { _%>
import org.springframework.dao.ConcurrencyFailureException;
<%_ } _%>
<%_ if (!databaseTypeNo) { _%>
import org.springframework.dao.DataAccessException;
<%_ } _%>
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.HttpMessageConversionException;
<%_ if (reactive && databaseTypeSql) { _%>
import org.springframework.stereotype.Component;
<%_ } _%>
import org.springframework.validation.BindingResult;
<%_ if (!reactive) { _%>
import org.springframework.web.bind.MethodArgumentNotValidException;
<%_ } _%>
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
<%_ if (reactive) { _%>
import org.springframework.web.bind.support.WebExchangeBindException;
import org.springframework.web.server.ServerWebExchange;
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.web.context.request.NativeWebRequest;
<%_ } _%>
import org.springframework.core.env.Environment;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ProblemDetail;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.web.ErrorResponse;
import org.springframework.web.bind.annotation.ResponseStatus;
<%_ if (reactive) { _%>
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.ProblemHandling;
import org.zalando.problem.spring.web<% if (reactive) { %>flux<% } %>.advice.security.SecurityAdviceTrait;
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono;
<%_ } _%>

import jakarta.annotation.Nonnull;
<%_ if (!reactive) { _%>
import jakarta.servlet.http.HttpServletRequest;
<%_ } _%>
import java.net.URI;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Controller advice to translate the server side exceptions to client-friendly json structures.
 * The error response follows RFC7807 - Problem Details for HTTP APIs (https://tools.ietf.org/html/rfc7807).
 */
@ControllerAdvice
<%_ if (databaseTypeSql && reactive) { _%>
// @Component("jhiExceptionTranslator")
<%_ } _%>
public class ExceptionTranslator {

<%_
let returnType;
let requestClass;
if (reactive) {
    returnType = 'Mono<ResponseEntity<Problem>>';
    requestClass = 'ServerWebExchange';
} else {
    returnType = 'ResponseEntity<ProblemDetail>';
    requestClass = 'NativeWebRequest';
}
_%>
    private static final String FIELD_ERRORS_KEY = "fieldErrors";
    private static final String MESSAGE_KEY = "message";
    private static final String PATH_KEY = "path";
    private static final String VIOLATIONS_KEY = "violations";

    @Value("${jhipster.clientApp.name}")
    private String applicationName;

    private final Environment env;

    public ExceptionTranslator(Environment env) {
        this.env = env;
    }

    /**
     * Post-process the Problem payload to add the message key for the front-end if needed.
     */
    public <%- returnType %> process(ProblemDetail problemDetail, HttpHeaders headers, URI pathURI) {
        ProblemDetail problem = ProblemDetail.forStatus(problemDetail.getStatus());
        problem.setType(problemDetail.getType() != null ? problemDetail.getType() : ErrorConstants.DEFAULT_TYPE);
        problem.setTitle(problemDetail.getTitle());
        problem.setDetail(problemDetail.getDetail());
        if(problemDetail.getProperties() == null || !problemDetail.getProperties().containsKey(PATH_KEY) && pathURI != null)
            problem.setProperty(PATH_KEY, pathURI);

        if(problemDetail.getProperties() != null)
            problemDetail.getProperties().forEach(problem::setProperty);
        // builder.withCause(((DefaultProblem) problem).getCause()).withDetail(problem.getDetail()).withInstance(problem.getInstance());
            
        if (problemDetail.getProperties() == null || !problemDetail.getProperties().containsKey(MESSAGE_KEY)) {
            problem.setProperty(MESSAGE_KEY, "error.http." + problemDetail.getStatus());
        }   
        return new ResponseEntity<>(problem, headers, HttpStatus.valueOf(problem.getStatus()));
    }

    @ExceptionHandler
    public <%- returnType %> handle<%_ if (reactive) { _%>BindingResult(WebExchangeBindException<% } else { %>MethodArgumentNotValid(MethodArgumentNotValidException<% } %> ex, @Nonnull <%= requestClass %> request) {
        BindingResult result = ex.getBindingResult();
        List<FieldErrorVM> fieldErrors = result.getFieldErrors().stream()
            .map(f -> new FieldErrorVM(f.getObjectName().replaceFirst("<%= dtoSuffix %>$", ""), f.getField(), StringUtils.isNotBlank(f.getDefaultMessage()) ? f.getDefaultMessage() : f.getCode()))
            .collect(Collectors.toList());
        
        ProblemDetail problem = ProblemDetail.forStatus(<% if (reactive) { %>Status.BAD_REQUEST<% } else { %>HttpStatus.BAD_REQUEST<% } %>);
        problem.setType(ErrorConstants.CONSTRAINT_VIOLATION_TYPE);
        problem.setTitle("<%_ if (reactive) { _%>Data binding and validation failure<% } else { %>Method argument not valid<% } %>");
        problem.setProperty(MESSAGE_KEY, ErrorConstants.ERR_VALIDATION);
        problem.setProperty(FIELD_ERRORS_KEY, fieldErrors);
        return process(problem, null, null);
    }
    <%_ if (!skipUserManagement) { _%>

    @ExceptionHandler
    public <%- returnType %> handleEmailAlreadyUsedException(<%= packageName %>.service.EmailAlreadyUsedException ex, <%= requestClass %> request) {
        EmailAlreadyUsedException problem = new EmailAlreadyUsedException();
        return process(problem.getBody(), HeaderUtil.createFailureAlert(applicationName, <%= enableTranslation %>, problem.getEntityName(), problem.getErrorKey(), problem.getMessage()), null);
    }

    @ExceptionHandler
    public <%- returnType %> handleUsernameAlreadyUsedException(<%= packageName %>.service.UsernameAlreadyUsedException ex, <%= requestClass %> request) {
        LoginAlreadyUsedException problem = new LoginAlreadyUsedException();
        return process(problem.getBody(), HeaderUtil.createFailureAlert(applicationName, <%= enableTranslation %>, problem.getEntityName(), problem.getErrorKey(), problem.getMessage()), null);
    }

    @ExceptionHandler
    public <%- returnType %> handleInvalidPasswordException(<%= packageName %>.service.InvalidPasswordException ex, <%= requestClass %> request) {
        return process(new InvalidPasswordException().getBody(), null, null);
    }
    <%_ } _%>

    @ExceptionHandler
    public <%- returnType %> handleBadRequestAlertException(BadRequestAlertException ex, <%= requestClass %> request) {
        return process(ex.getBody(), HeaderUtil.createFailureAlert(applicationName, <%= enableTranslation %>, ex.getEntityName(), ex.getErrorKey(), ex.getMessage()), null);
    }
<%_ if (!databaseTypeNo && !databaseTypeCassandra) { _%>

    @ExceptionHandler
    public <%- returnType %> handleConcurrencyFailure(ConcurrencyFailureException ex, <%= requestClass %> request) {
        ProblemDetail problem = ProblemDetail.forStatus(HttpStatus.CONFLICT);
        problem.setProperty(MESSAGE_KEY, ErrorConstants.ERR_CONCURRENCY_FAILURE);
        return process(problem, null, URI.create(extractURI(request)));
    }
<%_ } _%>

    @ExceptionHandler
    public ResponseEntity<ProblemDetail> handleBadCredentialsException(AuthenticationException ex, NativeWebRequest request) {
        ProblemDetail problem = ProblemDetail.forStatus(HttpStatus.UNAUTHORIZED.value());
        problem.setTitle(HttpStatus.UNAUTHORIZED.getReasonPhrase());
        problem.setType(ErrorConstants.DEFAULT_TYPE);
        problem.setDetail(ex.getMessage());
        return process(problem, null, URI.create(extractURI(request)));
    }

    @ExceptionHandler
    public ResponseEntity<ProblemDetail> handleAnyException(Exception ex, NativeWebRequest request
    ) {
        ProblemDetail problem = ProblemDetail.forStatus(toStatus(ex));
        problem.setType(ErrorConstants.DEFAULT_TYPE);
        ResponseStatus specialStatus = extractResponseStatus(ex);
        String title = specialStatus == null ? HttpStatus.valueOf(problem.getStatus()).getReasonPhrase() : specialStatus.reason();
        problem.setTitle(title);
        problem.setDetail(ex.getMessage());
        return process(problem, null, null);
    }

    private String extractURI(NativeWebRequest request) {
        HttpServletRequest nativeRequest = request.getNativeRequest(HttpServletRequest.class);
        String requestUri = nativeRequest != null ? nativeRequest.getRequestURI() : StringUtils.EMPTY;
        return requestUri;
    }

    private HttpStatus toStatus(final Throwable throwable) {
        // Let the ErrorResponse take this responsibility
        if(throwable instanceof ErrorResponse err)
            return HttpStatus.valueOf(err.getBody().getStatus());
        
        // This is derived from zalando
        if(throwable instanceof AccessDeniedException accDenied)
            return HttpStatus.FORBIDDEN;

        return Optional.ofNullable(resolveResponseStatus(throwable))
                .map(response -> response.value())
                .orElse(HttpStatus.INTERNAL_SERVER_ERROR);
    }

    private ResponseStatus extractResponseStatus(final Throwable throwable) {
        return Optional.ofNullable(resolveResponseStatus(throwable))
                .orElse(null);
    }


    private ResponseStatus resolveResponseStatus(final Throwable type) {
        final ResponseStatus candidate = findMergedAnnotation(type.getClass(), ResponseStatus.class);
        return candidate == null && type.getCause() != null ? resolveResponseStatus(type.getCause()) : candidate;
    }
/*
    @Override
    public ProblemBuilder prepare(final Throwable throwable, final StatusType status, final URI type) {
        Collection<String> activeProfiles = Arrays.asList(env.getActiveProfiles());

        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION)) {
            if (throwable instanceof HttpMessageConversionException) {
                return Problem.builder()
                    .withType(type)
                    .withTitle(status.getReasonPhrase())
                    .withStatus(status)
                    .withDetail("Unable to convert http message")
                    .withCause(Optional.ofNullable(throwable.getCause())
                        .filter(cause -> isCausalChainsEnabled())
                        .map(this::toProblem)
                        .orElse(null));
            }
<%_ if (!databaseTypeNo) { _%>
            if (throwable instanceof DataAccessException) {
                return Problem.builder()
                    .withType(type)
                    .withTitle(status.getReasonPhrase())
                    .withStatus(status)
                    .withDetail("Failure during data access")
                    .withCause(Optional.ofNullable(throwable.getCause())
                        .filter(cause -> isCausalChainsEnabled())
                        .map(this::toProblem)
                        .orElse(null));
            }
<%_ } _%>
            if (containsPackageName(throwable.getMessage())) {
                return Problem.builder()
                    .withType(type)
                    .withTitle(status.getReasonPhrase())
                    .withStatus(status)
                    .withDetail("Unexpected runtime exception")
                    .withCause(Optional.ofNullable(throwable.getCause())
                        .filter(cause -> isCausalChainsEnabled())
                        .map(this::toProblem)
                        .orElse(null));
            }
        }

        return Problem.builder()
            .withType(type)
            .withTitle(status.getReasonPhrase())
            .withStatus(status)
            .withDetail(throwable.getMessage())
            .withCause(Optional.ofNullable(throwable.getCause())
                .filter(cause -> isCausalChainsEnabled())
                .map(this::toProblem)
                .orElse(null));
    }

    private boolean containsPackageName(String message) {

        // This list is for sure not complete
        return StringUtils.containsAny(message, "org.", "java.", "net.", "jakarta.", "javax.", "com.", "io.", "de.", "<%= packageName %>");
    }
*/
}
